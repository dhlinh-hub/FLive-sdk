// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FLiveSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import ARKit
import AVFoundation
import Combine
import CoreGraphics
import CoreImage
import CoreVideo
@_exported import FLiveSDK
import FLiveUDPSocket
import Foundation
import Swift
import UIKit
import VideoToolbox
import Vision
import _Concurrency
import _StringProcessing
extension Foundation.OperationQueue {
  public var runningOperations: [Foundation.Operation] {
    get
  }
}
public struct Thumb : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Finger : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Hand : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PossibleHand : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension ARKit.ARFaceAnchor {
  public func convertData() -> Foundation.Data
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ARTrackingViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) open var showFaceMesh: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum SocketGateAway {
  case texture
  case blendShape
  case custom(Swift.String, Swift.String)
  public var components: (host: Swift.String, port: Swift.String) {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class FLiveManager : ObjectiveC.NSObject {
  public static func instance() -> FLiveSDK.FLiveManager
  public func connectSocket(hort: Swift.String, port: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
public struct Arm : Swift.Codable {
  public let shoulder: CoreFoundation.CGPoint
  public let elbow: CoreFoundation.CGPoint
  public let wrist: CoreFoundation.CGPoint
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Leg : Swift.Codable {
  public let hip: CoreFoundation.CGPoint
  public let knee: CoreFoundation.CGPoint
  public let ankle: CoreFoundation.CGPoint
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Face : Swift.Codable {
  public var nose: CoreFoundation.CGPoint
  public var leftEye: CoreFoundation.CGPoint
  public var rightEye: CoreFoundation.CGPoint
  public var leftEar: CoreFoundation.CGPoint
  public var rightEar: CoreFoundation.CGPoint
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Body : Swift.Codable {
  public var neck: CoreFoundation.CGPoint?
  public var face: FLiveSDK.Face?
  public var leftArm: FLiveSDK.Arm?
  public var rightArm: FLiveSDK.Arm?
  public var leftLeg: FLiveSDK.Leg?
  public var rightLeg: FLiveSDK.Leg?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct BodyWithHandPose : Swift.Codable {
  public var hands: [FLiveSDK.Hand]?
  public var body: FLiveSDK.Body?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
